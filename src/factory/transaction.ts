import { personType, sortType, transactionStatusType, transactionTasksExportationStatus, transactionType } from '@cinerino/factory';

import { IExtendId } from './autoGenerated';
import { IIdentifier } from './person';

/**
 * 取引開始パラメーターインターフェース
 */
export interface IStartParams<T extends transactionType, TAgent, TRecipient, TObject> {
    /**
     * 取引タイプ
     */
    typeOf: T;
    /**
     * 取引主体
     */
    agent: TAgent;
    /**
     * 取引物受取者
     */
    recipient?: TRecipient;
    /**
     * 取引対象
     */
    object: TObject;
    /**
     * 取引進行期限
     */
    expires: Date;
}
export type ITransaction<TStartParams, TResult, TError, TPotentialActions> =
    IExtendId<IAttributes<TStartParams, TResult, TError, TPotentialActions>>;
/**
 * 取引インターフェース
 */
export type IAttributes<TStartParams, TResult, TError, TPotentialActions> = TStartParams & {
    /**
     * 取引状態
     */
    status: transactionStatusType;
    /**
     * 取引結果
     */
    result?: TResult;
    /**
     * 取引エラー
     */
    error?: TError;
    /**
     * 取引進行期限
     */
    expires: Date;
    /**
     * 取引開始日時
     */
    startDate: Date;
    /**
     * 取引終了日時
     */
    endDate?: Date;
    /**
     * タスクエクスポート日時
     */
    tasksExportedAt?: Date;
    /**
     * タスクエクスポート状態
     */
    tasksExportationStatus: transactionTasksExportationStatus;
    /**
     * 事後に発生するアクション
     */
    potentialActions?: TPotentialActions;
};
/**
 * ソート条件インターフェース
 */
export interface ISortOrder {
    startDate?: sortType;
    endDate?: sortType;
    status?: sortType;
}
export interface ISearchConditions<T extends transactionType> {
    limit?: number;
    page?: number;
    sort?: ISortOrder;
    /**
     * 取引タイプ
     */
    typeOf: T;
    /**
     * IDリスト
     */
    ids?: string[];
    /**
     * ステータスリスト
     */
    statuses?: transactionStatusType[];
    /**
     * 開始日時(から)
     */
    startFrom?: Date;
    /**
     * 開始日時(まで)
     */
    startThrough?: Date;
    /**
     * 終了日時(から)
     */
    endFrom?: Date;
    /**
     * 終了日時(まで)
     */
    endThrough?: Date;
    agent?: {
        typeOf?: personType;
        ids?: string[];
        identifiers?: IIdentifier;
    };
    tasksExportationStatuses?: transactionTasksExportationStatus[];
}
